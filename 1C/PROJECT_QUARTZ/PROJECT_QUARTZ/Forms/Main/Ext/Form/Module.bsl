#Область ИНФОРМАЦИЯ_О_ВНЕШНЕЙ_ОБРАБОТКЕ_PROJECT_QUARTZ

// ЭТА ОБРАБОТКА СОБИРАЕТ ДАННЫЕ ОБО ВСЕХ СОЗДАННЫХ И ИЗМЕНЕННЫХ ДОКУМЕНТАХ / СПРАВОЧНИКАХ
// ДАННЫЕ ХРАНЯТСЯ НА ОТДЕЛЬНОМ ЛИЧНОМ СЕРВЕРЕ.

// ОСНОВНОЕ ОТЛИЧИЕ ОТ ОСТАЛЬНЫХ ВНЕШНИХ ОБРАБОТОК - КОНТРОЛЬ ВЕРСИЙ ОБЪЕКТОВ

#КонецОбласти 

#Область Смены_Чеки_ОФД

&НаКлиенте
Процедура НайтиДанныеИзОФДНаСервере(ДП, ДанныеФормы)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJson(, Символы.Таб);	
	ЗаписьJSON.ОткрытьФайл(ДП.ПутьJSON, КодировкаТекста.UTF8,,ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, ДанныеФормы, Новый НастройкиСериализацииJSON);
	ЗаписьJSON.Закрыть();
	
	Попытка
	
	// выполнение NodeJS
	ЗапуститьBAT(ДП.ПутьBAT);	
	
	Исключение
		
		Сообщить("Что-то пошло не так при выполенении скрипта JS... Обратитесь к администратору.");
		Возврат;
		
	КонецПопытки; 
	
	
	ИнформацияИзОФД = ПрочитатьПолученныйJSON(ДП.ПутьJSON);
	
	ОбработатьИнформациюИзОФД(ИнформацияИзОФД);
	
	// удаление (перезапись) содержимого JSON файла
	ЗаписьJSON.ОткрытьФайл(ДП.ПутьJSON, КодировкаТекста.UTF8,,ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Символы.НПП, Новый НастройкиСериализацииJSON);
	
КонецПроцедуры 

&НаСервере
Процедура ОбработатьИнформациюИзОФД(Инфо)
	
	Объект.НайденныеЧеки.Очистить();
	ОтсортированнаяТЗ = ОтсортироватьИнфо(Инфо);
	ЗаписатьТЗВТЧ(ОтсортированнаяТЗ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьТЗВТЧ(ТЗ)
	
	СуммаЧеков = 0;
	
	Для каждого СтрТЗ Из ТЗ Цикл
		
		СтрТЧ = Объект.НайденныеЧеки.Добавить();
		СтрТЧ.ЧекНайденВБазе = 666;
		Если НЕ СтрТЗ.errorsExist Тогда
			СтрТЧ.Статус = "Чек пробит";	
		Иначе 
			СтрТЧ.Статус = "Найдены ошибки в ОФД";
		КонецЕсли; 
		
		СтрТЧ.СменаЧека = СтрТЗ.shift;
		СтрТЧ.Номер = СтрТЗ.documentNumber;
		СтрТЧ.ДатаЧека = СтрСоединить(СтрРазделить(СтрТЗ.date, "T"), " ");
		СтрТЧ.ПризнакРасчета = СтрТЗ.accountingTypeString;
		Если СтрТЧ.ПризнакРасчета = "Возврат прихода" Тогда
			
			СтрТЧ.Сумма = -1 * Число(СтрТЗ.sum);	
			
		Иначе
			СтрТЧ.Сумма = СтрТЗ.sum;
			
		КонецЕсли; 
		СуммаЧеков = СуммаЧеков + СтрТЧ.Сумма;
		
		Если Число(СтрТЗ.amountCash) <> 0 Тогда
			СтрТЧ.СпособОплаты = "Наличные";	
		ИначеЕсли Число(СтрТЗ.amountElectronic) <> 0 Тогда	
			СтрТЧ.СпособОплаты = "Платежная карта";
		КонецЕсли;
		
		Для каждого Товар Из СтрТЗ.itemData Цикл
			
			СтрТЧТовар = Объект.НайденныеЧеки.Добавить();
			СтрТЧТовар.Номенклатура = Товар.itemName;
			СтрТЧТовар.ЦенаНоменклатуры = Товар.itemPrice;
			СтрТЧТовар.КоличествоНоменклатуры = Товар.itemQuantity;
			СтрТЧТовар.ЧекНайденВБазе = 666;
			
		КонецЦикла; 
		
		// разделительная строка
		СтрТЧРазделительная = Объект.НайденныеЧеки.Добавить();
		СтрТЧРазделительная.Статус                 = "//////////////////////////////////";
		СтрТЧРазделительная.СменаЧека              = "//////////////////////////////////";
		СтрТЧРазделительная.Номер                  = "//////////////////////////////////";                                     	
		СтрТЧРазделительная.Сумма                  = "//////////////////////////////////";
		СтрТЧРазделительная.ПризнакРасчета         = "//////////////////////////////////";
		СтрТЧРазделительная.СпособОплаты           = "//////////////////////////////////";
		СтрТЧРазделительная.Номенклатура           = "//////////////////////////////////";
		СтрТЧРазделительная.ЦенаНоменклатуры       = "//////////////////////////////////";
		СтрТЧРазделительная.КоличествоНоменклатуры = "//////////////////////////////////";
		СтрТЧРазделительная.ДатаЧека               = "//////////////////////////////////";
		СтрТЧРазделительная.ЧекНайденВБазе = 666;
	КонецЦикла;
	
	Объект.ЧековНайденоВОФД = ТЗ.Количество();
	Объект.СуммаНайденныхЧековОФД = СуммаЧеков;
	
КонецПроцедуры

&НаСервере
Функция ОтсортироватьИнфо(Инфо)
	
	СортТЗ = Новый ТаблицаЗначений;
	СтруктураОбъекта = Инфо[0];
	Для каждого Поле Из СтруктураОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(Поле.Значение) Тогда
			СортТЗ.Колонки.Добавить(Поле.Ключ, Новый ОписаниеТипов("Строка"));		
		Иначе
			СортТЗ.Колонки.Добавить(Поле.Ключ, Новый ОписаниеТипов(Строка(ТипЗнч(Поле.Значение))));	
		КонецЕсли; 
		
	КонецЦикла; 
	
	Для каждого СтруктураМассива Из Инфо Цикл
		
		СтрокаТЗ = СортТЗ.Добавить();
		
		Для каждого ПолеСтруктуры Из СтруктураМассива Цикл
			
			СтрокаТЗ[ПолеСтруктуры.Ключ] = ПолеСтруктуры.Значение;
			
		КонецЦикла; 	
		
	КонецЦикла; 
	
	СортТз.Сортировать("documentNumber");
	Возврат СортТЗ;
	
КонецФункции // ()

&НаКлиенте
Функция ПроверитьЗаполненностьПолейФормы()
	
	НезаполненныеПоляФормы = Новый Массив;
	ПрочиеОшибки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		НезаполненныеПоляФормы.Добавить(ЭтотОбъект.Элементы.Организация.Имя);		
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.КассаККМ) Тогда
		НезаполненныеПоляФормы.Добавить(ЭтотОбъект.Элементы.КассаККМ.Имя);	
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОт) Тогда
		НезаполненныеполяФормы.Добавить(ЭтотОбъект.Элементы.ДатаОт.Имя);
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.ДатаДо) Тогда
		НезаполненныеПоляФормы.Добавить(ЭтотОбъект.Элементы.ДатаДо.Имя);
	КонецЕсли;
	Если ((НачалоДня(Объект.ДатаДо) - НачалоДня(Объект.ДатаОт)) / (60 * 60 * 24) ) > 7 Тогда
		ПрочиеОшибки.Добавить("Получить данные можно максимум за неделю!");	
	КонецЕсли; 
	Если НЕ ЗначениеЗаполнено(Объект.ТипИскомыхДокументов) Тогда
		НезаполненныеПоляФормы.Добавить(ЭтотОбъект.Элементы.ТипИскомыхДокументов.Имя);
	КонецЕсли; 
	
	Если НезаполненныеПоляФормы.Количество() = 0 И ПрочиеОшибки.Количество() = 0 Тогда
		
		Возврат Истина;	
		
	КонецЕсли;
	
	Сообщения = Новый Структура;
	Сообщения.Вставить("НезаполненныеПоля", НезаполненныеПоляФормы);
	Сообщения.Вставить("ПрочиеОшибки", ПрочиеОшибки);
	
	Возврат Сообщения;
	
КонецФункции // ()

&НаКлиенте
Функция ПрочитатьПолученныйJSON(Путь)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(Путь);
	
	Результат = ПрочитатьJSON(ЧтениеJSON, Ложь);
	
	Возврат Результат;
	
КонецФункции // ()

&НаКлиенте
Процедура НайтиДанныеИзОФД(Команда)
	ОчиститьСообщения();
	
	ФормаЗаполнена = ПроверитьЗаполненностьПолейФормы();
	
	Если ТипЗнч(формаЗаполнена) = Тип("Структура") Тогда
		Предупреждение("Невозможно продолжить работу обработки...",,"Заполните поля формы или исправьте ошибки.");
		Для Индекс = 0 По ФормаЗаполнена.НезаполненныеПоля.Количество() - 1 Цикл
			Сообщить("Поле " + ФормаЗаполнена.НезаполненныеПоля[Индекс] + " не заполнено.");		
		КонецЦикла;
		Для Индекс = 0 По ФормаЗаполнена.ПрочиеОшибки.Количество() - 1 Цикл
			Сообщить("Необходимо устранить ошибку. Ошибка: " + ФормаЗаполнена.ПрочиеОшибки[Индекс]);
		КонецЦикла; 
		Возврат;
	КонецЕсли; 
	
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Organization", Строка(Объект.Организация));
	ДанныеФормы.Вставить("CashBoxKKM", Строка(Объект.КассаККМ));
	ДанныеФормы.Вставить("DateFrom", Строка(Формат(Объект.ДатаОт, "ДФ=yyyy-MM-dd")));
	ДанныеФормы.Вставить("DateTo", Строка(Формат(Объект.ДатаДо, "ДФ=yyyy-MM-dd")));
	Если Объект.ТипИскомыхДокументов = 1 Тогда
		ДанныеФормы.Вставить("DocumentType", "Shift");	
	ИначеЕсли Объект.ТипИскомыхДокументов = 2 Тогда
		ДанныеФормы.Вставить("DocumentType", "Receipt");
	КонецЕсли; 
	
	ПослеУстановкиДополнительныхПараметров = Новый ОписаниеОповещения("ПослеУстановкиДополнительныхПараметров", ЭтотОбъект, ДанныеФормы);
	ОткрытьФорму("ВнешняяОбработка.PROJECT_QUARTZ.Форма.ДополнительныеПараметры",,,,,,
	ПослеУстановкиДополнительныхПараметров,
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	//НайтиДанныеИзОФДНаСервере(ДанныеФормы, TemporaryFilesPath);
КонецПроцедуры 

&НаКлиенте
Процедура ПослеУстановкиДополнительныхПараметров(ДополнительныеПараметры, ДанныеФормы) Экспорт
	
	НайтиДанныеИзОФДНаСервере(ДополнительныеПараметры, ДанныеФормы)			
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьBAT(Путь)
	
	ПоставитьПаузу(2);
	
	ЗапуститьПриложение(Путь,, Истина); 
	
	ПоставитьПаузу(2);
	
	//Сообщить("BAT-ник должен был выполниться...");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьПаузу(Сек)
	
	КомандаWindows = "Timeout /T " + Строка(Сек) + " /NoBreak";
	ЗапуститьПриложение(КомандаWindows,,Истина);
	
КонецПроцедуры

// для тестирования
&НаСервере
Процедура ЗаполнитьТестовымиДаннымиНаСервере()
	Объект.Организация = Справочники.Организации.НайтиПоНаименованию("Гранд-Трейд ООО");
	Объект.КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("Внуково 6 ККМ1");
	Объект.ДатаОт = Дата('20230607');
	Объект.ДатаДо = Дата('20230607');
	Объект.ТипИскомыхДокументов = 2;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТестовымиДанными(Команда)
	ЗаполнитьТестовымиДаннымиНаСервере();
КонецПроцедуры 

&НаСервере
Функция НайтиЧекВБазе(Инфо)
	
	ПереформатированнаяДата = ПереформатироватьДату(Инфо.ДатаЧека);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата", ПереформатированнаяДата);
	Запрос.УстановитьПараметр("СуммаДокумента", Число(Инфо.Сумма));
	//Запрос.УстановитьПараметр("СпособОплаты", );
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.КассаККМ = &КассаККМ
	|	И ЧекККМ.Дата = &Дата
	|	И ЧекККМ.СуммаДокумента = &СуммаДокумента";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Если ТЗ.Количество() = 1 Тогда
		Возврат 1;
	ИначеЕсли ТЗ.Количество() > 1 Тогда
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли; 
	
КонецФункции // ()

&НаСервере
Функция ПереформатироватьДату(ПолученнаяДата)
	
	Дата = СтрРазделить(ПолученнаяДата, " ")[0];
	МассивДаты = СтрРазделить(Дата, "-");
	//МассивДаты_New = Новый Массив;
	
	ИндексПоследнего = МассивДаты.ВГраница();
	
	Возврат Дата(СтрСоединить(МассивДаты, ""));
	
КонецФункции // ()


&НаСервере
Процедура ПроверитьНаНаличиеВБазеНаСервере()
	Для каждого СтрокаТЧ Из Объект.НайденныеЧеки Цикл
		
		Если (ЗначениеЗаполнено(СтрокаТЧ.Статус) И ЗначениеЗаполнено(СтрокаТЧ.СменаЧека)) 
			И (СтрокаТЧ.Статус <> "//////////////////////////////////" И СтрокаТЧ.СменаЧека <> "//////////////////////////////////") Тогда
			
			НайденныйЧек = НайтиЧекВБазе(СтрокаТЧ);	
			СтрокаТЧ.ЧекНайденВБазе = НайденныйЧек;	
			
		КонецЕсли; 
		
	КонецЦикла; 		
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаНаличиеВБазе(Команда)
	Если Объект.НайденныеЧеки.Количество() = 0 Тогда
		
		Сообщить("Табличная часть 'Найденные чеки' пуста...");
		Возврат;	
		
	КонецЕсли; 
	Попытка
		ПроверитьНаНаличиеВБазеНаСервере();
	Исключение
		Ошибка = ОписаниеОшибки();
		Сообщить(Ошибка);
	КонецПопытки; 
КонецПроцедуры

#КонецОбласти

#Область Проставить_вид_цен_для_Распределение
	
&НаСервере
Функция Выполнить_ТНаСервере(ДанныеФормы, Раздел)
	МассивСостояний = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", ДанныеФормы.Партнер);
	Запрос.УстановитьПараметр("Организация", ДанныеФормы.Организация);
	Запрос.УстановитьПараметр("Соглашение", ДанныеФормы.Соглашение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	               |	ПриобретениеТоваровУслуг.Дата КАК Дата,
	               |	ПриобретениеТоваровУслуг.Проведен КАК Проведен
	               |ИЗ
	               |	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	               |ГДЕ
	               |	ПриобретениеТоваровУслуг.Проведен
	               |	И ПриобретениеТоваровУслуг.Партнер = &Партнер
	               |	И ПриобретениеТоваровУслуг.Организация = &Организация
	               |	И ПриобретениеТоваровУслуг.Соглашение = &Соглашение";
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		СтруктураСостоянийОбъекта = Новый Структура;
	
		ДокОбъект = СтрокаТЗ.Ссылка.ПолучитьОбъект();
		
		СтруктураСостоянийОбъекта.Вставить("Name", Строка(ДокОбъект.Ссылка));
		// ЗАПИСЬ СОСТОЯНИЯ ОБЪЕКТА ДО
		МассивСостоянияДо = ЗаписатьСостояниеОбъекта(ДокОбъект, Новый Массив);
		СтруктураСостоянийОбъекта.Вставить("Before", МассивСостоянияДо);
		
		ДокОбъект.РегистрироватьЦеныПоставщика = Истина;
		Для каждого СтрокаТЧ Из ДокОбъект.Товары Цикл
		
			СтрокаТЧ.ВидЦеныПоставщика = ДанныеФормы.Соглашение.ВидЦеныПоставщика;	
		
		КонецЦикла;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Сообщить("Документ " + Строка(ДокОбъект.Ссылка) + " был успешно проведен!");
		
		
		// ЗАПИСЬ СОСТОЯНИЯ ОБЪЕКТА ПОСЛЕ
		МассивСостоянияПосле = ЗаписатьСостояниеОбъекта(ДокОбъект, Новый Массив);
		СтруктураСостоянийОбъекта.Вставить("After", МассивСостоянияПосле);
		СтруктураСостоянийОбъекта.Вставить("ChangedBy", Раздел);
		
		МассивСостояний.Добавить(СтруктураСостоянийОбъекта);
		
	КонецЦикла;
		
	Возврат МассивСостояний;
		
КонецФункции

&НаКлиенте
Процедура Выполнить_Т(Команда)
	Раздел = "Проставить вид цен для _Распределение";
	ДанныеФормы = Новый Структура;
	ДанныеФормы.Вставить("Партнер", Объект.Партнер);
	ДанныеФормы.Вставить("Организация", Объект.Организация);
	ДанныеФормы.Вставить("Соглашение", Объект.Соглашение);
	Попытка
	
		Состояния = Выполнить_ТНаСервере(ДанныеФормы, Раздел);	
	
	Исключение
		
		Сообщить("error! " + ОписаниеОшибки());
		
	КонецПопытки; 
	
	ЗаписатьМассивСостоянийОбъектаВJSON(Состояния);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НеобходимыеДанныеСтроки = Новый Структура;
	НеобходимыеДанныеСтроки.Вставить("Партнер", Объект.Партнер);
	НеобходимыеДанныеСтроки.Вставить("Организация", Объект.Организация);
	Форма = ОткрытьФорму("Справочник.СоглашенияСПоставщиками.ФормаВыбора",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Партнер");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НеобходимыеДанныеСтроки.Партнер;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = НеобходимыеДанныеСтроки.Организация;
	ЭлементОтбора.Использование = Истина;
КонецПроцедуры	

#КонецОбласти

#Область ГЛОБАЛЬНЫЕ_МЕТОДЫ_ОБРАБОТКИ

&НаСервере
Функция ЗаписатьСостояниеОбъекта(Об, Массив)
	
	СтруктураОбъекта = Новый Структура;
	
	Для каждого Реквизит Из Об.Метаданные().Реквизиты Цикл
	
		СтруктураОбъекта.Вставить(Реквизит.Имя, Строка(Об[Реквизит.Имя]));		
	
	КонецЦикла; 
	
	Для каждого ТЧ Из Об.Метаданные().ТабличныеЧасти Цикл
	
		СтруктураТЧ = Новый Структура;
		
		Для каждого СтрТЧ Из Об[ТЧ.Имя] Цикл
		
			Для каждого Реквизит Из ТЧ.Реквизиты Цикл
			
				СтруктураТЧ.Вставить(Реквизит.Имя, Строка(СтрТЧ[Реквизит.Имя])); 	
			
			КонецЦикла; 	
		
		КонецЦикла; 
		
		СтруктураОбъекта.Вставить(ТЧ.Имя, СтруктураТЧ);
	
	КонецЦикла;
		
	Массив.Добавить(СтруктураОбъекта);
		
	Возврат Массив;
	
КонецФункции // ()

&НаКлиенте
Процедура ЗаписатьМассивСостоянийОбъектаВJSON(Состояния)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJson(, Символы.Таб);	
	ЗаписьJSON.ОткрытьФайл("C:\Users\nochevkin\Desktop\app\json_for_writing_data\data.json", КодировкаТекста.UTF8,,ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Состояния, Новый НастройкиСериализацииJSON);
	ЗаписьJSON.Закрыть();			

КонецПроцедуры
 
&НаСервере
Процедура ОчиститьЭлемент(Реквизит)
	Попытка
		ЭтаФорма[Реквизит].Очистить();
	Исключение КонецПопытки; 
	Попытка
		ЭтаФорма[Реквизит] = Неопределено;
	Исключение КонецПопытки; 
КонецПроцедуры

&НаСервере
Процедура ОчиститьОбработкуНаСервере()

	Для каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
		Если Реквизит.Имя = "Объект" Тогда
			Об = РеквизитФормыВЗначение("Объект");
		    Для каждого р Из Об.Метаданные().Реквизиты Цикл
			
				Объект[р.Имя] = Неопределено;		
			
			КонецЦикла;
			Для каждого р Из об.Метаданные().ТабличныеЧасти Цикл
			
				Объект[р.Имя].Очистить();	
			
			КонецЦикла;
		Иначе
			ОчиститьЭлемент(Реквизит.Имя);
		КонецЕсли; 	
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбработку(Команда)
	ОчиститьОбработкуНаСервере();
КонецПроцедуры
	
#КонецОбласти
